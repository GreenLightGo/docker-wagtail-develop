volumes:
  postgres-data:
  node_modules:
  
services:
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./wagtail:/code/wagtail
      - ./bakerydemo:/code/bakerydemo
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}/${DATABASE_NAME}"
    depends_on:
      db:
        condition: service_healthy
      frontend:
        condition: service_started

  db:
    environment:
      - "POSTGRES_DB=${DATABASE_NAME}"
      - "POSTGRES_USER=${DATABASE_USER}"
      - "POSTGRES_PASSWORD=${DATABASE_PASSWORD}"
    restart: unless-stopped
    image: postgres:14.1
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready --quiet --dbname=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}/${DATABASE_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    working_dir: /code/wagtail
    volumes:
      - ./wagtail:/code/wagtail
      - node_modules:/code/wagtail/node_modules
    command: bash -c "echo 'Copying node_modules, this may take a few minutes...' && rsync -rah --info=progress2 /node_modules /code/wagtail/ && npm run start"
    restart: "no"
    tty: true
